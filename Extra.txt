#include <iostream>
#include <bitset>
#include <cmath>
#include <algorithm>
#define BITS 64

class BinaryNum {
    int bits;
    static int calcBits(int);
    std::string getNBits(std::bitset<BITS>& bs) const;
    std::bitset<BITS> A,Q,M;
public:
    BinaryNum(int , int);
    void print(const std::string& step = "Start");
    bool add();
    void shiftR();
    void shiftL();
    bool sub();
    void multiply();
    void multiplyBooth();
    void divideRestore();
};
  
  int BinaryNum::calcBits(int k) {
    return (int)log2(k)+1;
}

inline std::string BinaryNum::getNBits(std::bitset<BITS>& bs) const {
    std::string str;
    str = bs.to_string().substr(BITS-bits, bits);
    return str;
}

bool BinaryNum::add() {
    std::bitset<BITS> temp1(A.to_ulong()+M.to_ulong());
    A = temp1;
    return A[bits];
}

bool BinaryNum::sub() {
    std::bitset<BITS> temp1(A.to_ulong()-M.to_ulong());
    A = temp1;
    return A[bits];
}

void BinaryNum::shiftR() {
    Q >>= 1;
    Q[bits-1] = A[0];
    A >>= 1;
}

void BinaryNum::shiftL() {
    Q <<= 1;
    A <<= 1;
    A[0] = Q[bits];
}

BinaryNum::BinaryNum(int first,int second) {
    std::bitset<BITS> temp1(first);
    Q = temp1;
    std::bitset<BITS> temp2(second);
    M = temp2;
    bits = std::max(calcBits(first),calcBits(second));
    print();
    std::cout << std::endl;
}

void BinaryNum::print(const std::string& step) {
    std::cout << "A = " << getNBits(A) << "   Q = " << getNBits(Q) << "   M = " << getNBits(M) << "   " << step;
}

void BinaryNum::multiply() {
    int carry;
    for (int i = 0; i < bits; ++i) {
        if (Q[0]) {
            carry = add();
            std::cout << "C = " << carry << "   ";
            print("Add");
            std::cout << std::endl;
        }
        shiftR();
        carry = 0;
        std::cout << "C = " << carry << "   ";
        print("Shift");
        std::cout << std::endl << std::endl;
    }
}

void BinaryNum::multiplyBooth() {
    bits++;
    bool q = false;
    for (int i = 0; i < bits; ++i) {
        if(Q[0] == 1 && !q) {
            sub();
            print("A<-A-M");
            std::cout << "   Q-1 = " << q << std::endl;
            q = Q[0];
            shiftR();
            print("Shift");
            std::cout << "   Q-1 = " << q << std::endl << std::endl;
        } else if (Q[0] == 0 && q) {
            add();
            print("A<-A+M");
            std::cout << "   Q-1 = " << q << std::endl;
            q = Q[0];
            shiftR();
            print("Shift");
            std::cout << "   Q-1 = " << q << std::endl << std::endl;
        } else {
            q = Q[0];
            shiftR();
            print("Shift");
            std::cout << "   Q-1 = " << q << std::endl << std::endl;
        }
    }
}

void BinaryNum::divideRestore() {
    for (int i = 0; i < bits; ++i) {
        shiftL();
        std::cout << "C = " << A[bits] << "   ";
        print("Shift");
        std::cout << std::endl;
        sub();
        if (A[bits] == 1) {
            std::cout << "C = " << A[bits] << "   ";
            print("A<-A-M");
            std::cout << "   Q-0 = " << Q[0] << std::endl << std::endl;
            add();
            std::cout << "C = " << A[bits] << "   ";
            print("Restore");
            std::cout << std::endl << std::endl;
        } else {
            Q[0] = 1;
            std::cout << "C = " << A[bits] << "   ";
            print("A<-A-M");
            std::cout <<  "   Q-0 = " << Q[0] << std::endl << std::endl;
        }
    }
}

int main() {
    int Mlr , Mld;
    int ch = -1;
    while (ch != 0) {
        std::cout << "Enter 1 for Booth's multiplication" <<
        std::endl << "Enter 2 for unsigned multiplication" <<
        std::endl << "Enter 3 for Restoring Division" <<
        std::endl << "Enter 0 to exit" << std::endl;
        std::cin >> ch;
        switch (ch) {
            case 1: {
                std::cout << "Enter the Multiplier: ";
                std::cin >> Mlr;
                std::cout << "Enter the Multiplicand: ";
                std::cin >> Mld;
                BinaryNum numb(Mlr, Mld);
                numb.multiplyBooth();
                break;
            }
            case 2: {
                std::cout << "Enter the Multiplier: ";
                std::cin >> Mlr;
                std::cout << "Enter the Multiplicand: ";
                std::cin >> Mld;
                BinaryNum numb(Mlr, Mld);
                numb.multiply();
                break;
            }
            case 3: {
                std::cout << "Enter the Dividend: ";
                std::cin >> Mlr;
                std::cout << "Enter the Divisor: ";
                std::cin >> Mld;
                BinaryNum numb(Mlr, Mld);
                numb.divideRestore();
                break;
            }
            default:
                ch = 0;
        }
    }

    system("pause");
    return 0;
}
